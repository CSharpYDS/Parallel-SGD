from abc import ABCMeta, abstractclassmethod, abstractmethod

from utils.delegate import Delegation


class ICommunicationCtrl:

    def __init__(self):
        self.__updated_weight_buffer = None
        self.__update_complete = False

    def dispose(self):
        """
            Dispose this object and release all the memory.
        :return: None
        """
        pass

    def update_blocks(self, block_weight):
        """
            Update the weights generated by a specified block of sample to the cluster,
            function will return a tuple, the first element is the list of node IDs
            of the targets to be sent, the second element is the actual content json to
            be sent.
            Function return None if nothing to be sent.
            When the update process was done, it will check if there were
            enough intermediate values to rebuild full weights.
            such checking will be useless within Synchronized-Stochastic Gradient Descent algorithm.
        :param block_weight: weights generated by a specified block of sample
        :return: None if nothing to sent or tuple like : (send target, json object).
        """
        pass

    def receive_blocks(self, json_dict):
        """
            Receive a json like dictionary from cluster.
            decompose the object and check if there were enough intermediate values to
            rebuild full weights.
            Available weights will be saved in self.updated_weight_buffer
        :param json_dict: dictionary, with string as key, object as value.
        :return: None
        """
        pass

    def check_for_combine(self, new_block_id):
        """
            Check if we had all the intermediate values, check
            self.updated_weight_buffer if full weights has been rebuilt.
        :param new_block_id: the id of the block mostly recently received
        :return: None
        """
        pass

    def is_done(self):
        """
            Check if all the coding and decoding process is done.
        :return: True if done, False if not done.
        """
        return self.__update_complete

    def get_result(self):
        """
            Clear current weights buffer and return.
        :return: weights buffer: ndarray
        """
        tmp = self.__updated_weight_buffer
        self.__updated_weight_buffer = None
        self.__update_complete = False

        return tmp

    def set_result(self, content):
        """
            Add current delta to old ones
        """
        if self.__updated_weight_buffer is None:
            self.__updated_weight_buffer = content
        else:
            self.__updated_weight_buffer += content

        self.__update_complete = True


class IComPack(metaclass=ABCMeta):

    @abstractmethod
    def to_dictionary(cls):
        """
            Write the package content to a json like object.
        :return: json like object
        """
        pass

    @abstractmethod
    def from_dictionary(cls):
        """
            Build a compack from json like object.
        :return: IComPack instance
        """
        pass

    @abstractmethod
    def compose_compack(cls, params=None):
        """
            compose a coded compack object.
        :return: IComPack instance
        """
        pass

    @abstractmethod
    def decompose_compack(cls, params=None):
        """
            decompose a coded compack object.
        :return: intermediate value
        """
        pass
